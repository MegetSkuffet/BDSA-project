@page "/fetchdata"
@inject HttpClient Http
@using System.Globalization

<PageTitle>Commit History</PageTitle>

<h1>Commit History</h1>


<div class="col-md-6 col-lg-6 p-3">
    <h3>Write the username of the repo owner</h3>
    <input @bind="@userName"/>
    <h3>Write the name of the repo</h3>
    <input @bind="@repoName"/>
</div>

<RadzenButton Shade="Shade.Lighter" Click="@Commitfrequency" Text="CommitFrequency" ButtonStyle="ButtonStyle.Light" />
<RadzenButton Shade="Shade.Lighter" Click="@Authors" Text="Authors" ButtonStyle="ButtonStyle.Light" />

 <div class="container">
@if (authors != null)
{
    @foreach (var author in authors)
    {
        <h1>@author.name</h1>
       
            <div class="row">
                <div class="col">
                    <RadzenCard Class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem">
                        <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                        <RadzenLabel Text="Smooth" For="smooth" Style="margin-right: 1rem;"/>
                        <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                        <RadzenLabel Text="Show Data Labels" For="dataLabels"/>
                    </RadzenCard>
                    <RadzenChart>
                        <RadzenAreaSeries Smooth="@smooth" Data="@author.AuthorCommits" CategoryProperty="Date" Title="2019" ValueProperty="count" RenderingOrder="1">
                            <RadzenSeriesDataLabels Visible="@showDataLabels"/>
                        </RadzenAreaSeries>

                        <RadzenCategoryAxis Padding="20" Formatter="@FormatAsMonth"/>
                        <RadzenValueAxis Formatter="@FormatAsCount">
                            <RadzenGridLines Visible="true"/>
                            <RadzenAxisTitle Text="Revenue in USD"/>
                        </RadzenValueAxis>
                    </RadzenChart>
                </div>
            </div>
       
    }
}
else if (commits != null)
{
   
        <div class="row">
            <div class="col">
                <RadzenCard Class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem" >
                    <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                    <RadzenLabel Text="Smooth" For="smooth" Style="margin-right: 1rem;"/>
                    <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                    <RadzenLabel Text="Show Data Labels" For="dataLabels" />
                </RadzenCard>
                <RadzenChart>
                    <RadzenAreaSeries Smooth="@smooth" Data="@commits" CategoryProperty="Date" Title="2019" ValueProperty="count" RenderingOrder="1">
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenAreaSeries>
                    
                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsMonth" />
                    <RadzenValueAxis Formatter="@FormatAsCount">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Revenue in USD" />
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>
  
}
else
{
    <p><em>Waiting for input</em></p>
}
  </div>

@code {
    
    
    private Commit[]? commits;
    private Author[]? authors;
    bool smooth = false;
    bool showDataLabels = true;
    private string userName = "";
    private string repoName = "";
    private bool buttonclick = false;
    
    protected async Task Commitfrequency()
    {
        authors = null;
        commits = await Http.GetFromJsonAsync<Commit[]>($"Repository/commitfrequency/{userName}/{repoName}");
    }

    protected async Task Authors()
    {
        commits = null;
        authors = await Http.GetFromJsonAsync<Author[]>($"Repository/Author/{userName}/{repoName}");
    }
    
    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("dd-MM-yyyy");
        }

        return string.Empty;
    }

    string FormatAsCount(object value)
    {
        if (value != null)
        {
            return value.ToString();
        }
        return  string.Empty;
    }
    
    public class Commit
    {
        public DateTime Date { get; set; }
        public int count { get; set; }
    }
    
    public class Author
    {
        public string name { get; set; }
        public Commit[] AuthorCommits { get; set; }
    }
    
}